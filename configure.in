dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/actors.c)
AM_INIT_AUTOMAKE(xarchon, 0.60)
AM_CONFIG_HEADER(config.h)

dnl ------------------
dnl Check for programs
dnl ------------------

AC_PROG_CC
if test -n "$GCC"; then
   CFLAGS="$CFLAGS -Wall"
fi
AC_PROG_CXX
if test -n "$GCC"; then
   CXXFLAGS="$CXXFLAGS -Wall"
fi
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PROG_INSTALL

dnl ------------------
dnl Check for GNU find
dnl ------------------

dnl AC_MSG_CHECKING(for -printf option in find)
dnl if test `find /dev/null -printf 'x' 2> /dev/null`"y" != "xy"; then
dnl    AC_MSG_RESULT(no)
dnl    AC_MSG_ERROR(The -printf option is required for a successful installation)
dnl fi
dnl AC_MSG_RESULT(yes)

dnl ---------------------
dnl Check for X libraries
dnl ---------------------

AC_PATH_XTRA
FC_CHECK_X_LIB(X11, XOpenDisplay, , 
   AC_MSG_ERROR(Need X11; perhaps try/adjust --x-libraries))

dnl ---------------------
dnl Check for Xpm library
dnl ---------------------

FC_XPM_PATHS
if test "$xpm_incdir" != "no"; then
    X_CFLAGS="$X_CFLAGS -I$xpm_incdir"
fi
if test "$xpm_libdir" != "no"; then
    X_LIBS="$X_LIBS -L$xpm_libdir"
dnl Try using R values set in AC_PATH_XTRA:
    if test "$ac_R_nospace" = "yes"; then
        X_LIBS="$X_LIBS -R$xpm_libdir"
    elif test "$ac_R_space" = "yes"; then
        X_LIBS="$X_LIBS -R $xpm_libdir"
    fi
fi
fc_save_X_LIBS="$X_LIBS"
X_LIBS="$X_LIBS $X_PRE_LIBS"
FC_CHECK_X_LIB(Xpm, XpmReadFileToPixmap, , 
    AC_MSG_ERROR(Need Xpm library; perhaps try/adjust --with-xpm-lib))
X_LIBS="$X_LIBS -lXpm"

dnl ---------------------------------
dnl Check for user interface toolkits
dnl ---------------------------------

TOOLKIT_LIBS=""
TOOLKIT_LDADDS=""

GTK_SUBDIR=""
AM_PATH_GTK(1.2.0, have_gtk=yes, )
if test "x$have_gtk" = xyes; then
   AC_PATH_PROG(GLADE, glade, notfound, $PATH:$gtk_config_exec_prefix/bin)
   if test "x$GLADE" = xnotfound; then
       AC_MSG_WARN([Glade is missing;  the GTK+ interface will not be built])
       have_gtk=""
   else
       GTK_SUBDIR="gtk"
       TOOLKIT_LIBS="$TOOLKIT_LIBS gtk/libgtk.a"
       TOOLKIT_LDADDS="$TOOLKIT_LDADDS $GTK_LIBS"
       AC_DEFINE(HAVE_GTK)
   fi
fi
AC_SUBST(GTK_SUBDIR)

QT_SUBDIR=""
XC_PATH_QT(whatever, have_qt=yes, )
if test "x$have_qt" = xyes; then
   QT_SUBDIR="qt"
   TOOLKIT_LIBS="$TOOLKIT_LIBS qt/libqt.a"
   TOOLKIT_LDADDS="$TOOLKIT_LDADDS $QT_LDFLAGS"
   AC_DEFINE(HAVE_QT)
fi
AC_SUBST(QT_SUBDIR)

AC_SUBST(TOOLKIT_LIBS)
AC_SUBST(TOOLKIT_LDADDS)

dnl ----------------------
dnl Select default toolkit
dnl ----------------------

def_toolkit="none"

AC_ARG_WITH(default-gtk,
    [  --with-default-gtk      default to GTK+ toolkit ],
    def_toolkit="gtk",
)

AC_ARG_WITH(default-qt,
    [  --with-default-qt       default to Qt toolkit ],
    def_toolkit="qt",
)

AC_MSG_CHECKING(which toolkit is default)

case $def_toolkit in
    none)
        if test "x$have_gtk" = xyes; then
            DEFAULT_TOOLKIT="GTK+"
        elif test "x$have_qt" = xyes; then
            DEFAULT_TOOLKIT="Qt"
        else
            AC_MSG_ERROR([
        Neither GTK+ nor Qt toolkits were found])
        fi
        ;;

    gtk)
        if test "x$have_gtk" = xyes; then
            DEFAULT_TOOLKIT="GTK+"
        else
            AC_MSG_ERROR([
        GTK+ was requested, but could not be found])
        fi
        ;;

    qt)
        if test "x$have_qt" = xyes; then
            DEFAULT_TOOLKIT="Qt"
        else
            AC_MSG_ERROR([
        Qt was requested, but could not be found])
        fi
        ;;
esac

AC_MSG_RESULT($DEFAULT_TOOLKIT)
AC_SUBST(DEFAULT_TOOLKIT)

dnl --------------------------
dnl Check for pthreads library
dnl --------------------------

have_pthreads=yes
AC_CHECK_HEADER(pthread.h, , have_pthreads=no)
AC_CHECK_LIB(pthread, pthread_create, , have_pthreads=no)

dnl -------------------------
dnl Check for sound libraries
dnl -------------------------

have_esd=no
AM_PATH_ESD(,have_esd=yes)
have_sdl=no
dnl AM_PATH_SDL(,have_sdl=yes)

dnl ----------------------
dnl Check for header files
dnl ----------------------

AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h sys/time.h unistd.h, ,
   AC_MSG_ERROR(Your system is missing some important stuff))

dnl ------------------------------------------------------------
dnl Check for typedefs, structures, and compiler characteristics
dnl ------------------------------------------------------------

AC_C_CONST
AC_HEADER_TIME

dnl ---------------------------
dnl Check for library functions
dnl ---------------------------

AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gettimeofday setitimer strdup , ,
   AC_MSG_ERROR(Your system is missing some important stuff))

dnl -------------------
dnl Check for nanosleep
dnl -------------------

AC_CHECK_FUNC(nanosleep)
if test $ac_cv_func_gethostbyname = no; then
   AC_CHECK_LIB(posix4, nanosleep, LIBS="-lposix4 $LIBS",
      AC_MSG_ERROR(Your system is missing some important stuff))
fi

dnl ------------------
dnl Networking support
dnl ------------------

want_networking=yes
AC_ARG_ENABLE(network, [  --disable-network       exclude networking support ],
   if test "x$enableval" = xno; then want_networking=no; fi ,)
AC_MSG_CHECKING(wheather to include networking support)
if test "x$want_networking" = xyes -a "x$have_pthreads" = xyes; then
   AC_DEFINE(NETWORKING)
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi

dnl ----------------------
dnl Check for sound target
dnl ----------------------

want_sound=yes
AC_ARG_ENABLE(sound, [  --disable-sound         exclude sound support ],
   if test "x$enableval" = xno; then want_sound=no; fi ,)
AC_MSG_CHECKING(which sound driver to use)
SOUND_DRIVER="null"
if test "x$want_sound" = xyes; then
   if test "x$have_esd" = xyes; then
     SOUND_DRIVER="esd"
   elif test "x$have_sdl" = xyes; then
     SOUND_DRIVER="sdl"
   fi
fi
AC_MSG_RESULT(the $SOUND_DRIVER driver)
AC_SUBST(SOUND_DRIVER)

dnl ----------------
dnl Joystick support
dnl ----------------

AC_CHECK_HEADERS(linux/joystick.h, ,)
AC_ARG_ENABLE(joystick, [  --disable-joystick      exclude joystick support ],
   if test "x$enableval" = xno; then unset HAVE_LINUX_JOYSTICK_H; fi ,)

dnl --------------
dnl Autopilot mode
dnl --------------

AC_ARG_ENABLE(autopilot, [  --enable-autopilot      a developerment option;  you *dont* wanna try this ],
   [ AC_DEFINE(AUTOPILOT) AC_MSG_RESULT(Autopilot mode selected) ] )

dnl -----------------------
dnl Get data directory path
dnl -----------------------

FC_EXPAND_DIR(DATADIR, "$datadir/xarchon")
AC_DEFINE_UNQUOTED(DATADIR, "$DATADIR")

dnl -------------------
dnl Create output files
dnl -------------------

AC_OUTPUT(
Makefile
src/Makefile
src/gtk/Makefile
src/qt/Makefile
data/Makefile
stamp.h)
